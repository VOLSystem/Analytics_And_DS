--view #1 Calculates total weight and total cost of each orderline:
CREATE VIEW OrderlineCalcView AS
(SELECT ORDERLINE.ORDERLINE_ID,ORDERLINE.ORDER_ID,DEL_ID,ORDERLINE.PRODUCT_ID,
  	(orderline.orderline_qty*product.product_cost) as Orderline_Total_Cost, (orderline.orderline_qty*product.product_wgt) as Orderline_Total_Wgt
FROM ORDERLINE,PRODUCT
WHERE ORDERLINE.PRODUCT_ID=PRODUCT.PRODUCT_ID
GROUP BY ORDERLINE.ORDERLINE_ID,ORDERLINE.ORDER_ID,DEL_ID,ORDERLINE.PRODUCT_ID, ORDERLINE.ORDERLINE_QTY,
     	PRODUCT.PRODUCT_COST,PRODUCT.PRODUCT_WGT);

SELECT * FROM OrderlineCalcView;
DROP VIEW OrderlineCalcView;

--view #2 Calculates delivery total weights:
CREATE VIEW DeliveryCalcView AS
SELECT DELIVERY.Del_ID,DELIVERY.Ship_ID,SUM(PRODUCT.Product_Wgt*ORDERLINE.Orderline_Qty) AS Del_Total_Wgt,Del_Container_ID,Del_Exp_Date
FROM DELIVERY,ORDERLINE,PRODUCT
WHERE DELIVERY.DEL_ID=ORDERLINE.DEL_ID AND PRODUCT.PRODUCT_ID=ORDERLINE.PRODUCT_ID
GROUP BY DELIVERY.DEL_ID,DELIVERY.SHIP_ID,DEL_CONTAINER_ID,DEL_EXP_DATE;

SELECT * FROM DeliveryCalcView;
DROP VIEW OrderlineCalcView;

--view #3
CREATE VIEW INVENTORY AS
SELECT PLANT_ID,INVENTORYCOUNT.PRODUCT_ID,PRODUCT_DESCRIPT,QTY_ON_HAND,QTY_ON_ORDER,QTY_ON_BACKORDER,REORDER_POINT
FROM INVENTORYCOUNT,PRODUCT
WHERE INVENTORYCOUNT.PRODUCT_ID=PRODUCT.PRODUCT_ID AND QTY_ON_HAND IS NOT NULL;

-- view #4 Query 1, shows details about planned shipments:
CREATE VIEW PlannedShipmentsView AS
SELECT SHIP_ID, SHIP_EXEC_DATE, SHIP_PLN_ARR_DATE, CARRIER.CARRIER_ID, CARRIER_NAME, CARRIER_CUST_REP_PHONE_NO, 
EMPL_ID, EMPL_F_NAME, EMPL_L_NAME, EMPL_PHONE_NO, PLANT.PLANT_ID
FROM SHIPMENT
LEFT JOIN CARRIER
ON SHIPMENT.CARRIER_ID = CARRIER.CARRIER_ID
LEFT JOIN EMPLOYEE
ON SHIPMENT.T_EMPL_ID = EMPLOYEE.EMPL_ID
LEFT JOIN PLANT
ON SHIPMENT.PLANT_ID = PLANT.PLANT_ID

SELECT * FROM PlannedShipmentsView;
DROP VIEW PlannedShipmentsView;

-- view #5 Query 2, shows materials in rolls.
CREATE VIEW MaterialsinRollsView AS
SELECT Roll_No, MTS_Mat_ID, Product.Product_Cost As [Roll Cost], MatCost.Product_Cost As [Material Cost], Plant_ID, Qty_On_Hand
FROM ProductLine
INNER JOIN Product
ON Roll_No = Product_ID
INNER JOIN (SELECT Product_ID, Product_Cost
FROM Product
INNER JOIN MakeToStock
ON Product.Product_ID = MakeToStock.MTS_Mat_ID) As MatCost
ON MTS_Mat_ID = MatCost.Product_ID
LEFT JOIN InventoryCount
ON InventoryCount.Product_ID = Product.Product_ID
-- ORDER BY MTS_MAt_ID

SELECT * FROM MaterialsinRollsView;
DROP VIEW MaterialsinRollsView;



-- view #6 Query 4, shows order summaries by customer
CREATE VIEW OrderSummaryView AS
SELECT CUSTOMERORDER.Order_ID, SUM(Orderline_Total_Cost) TotalOrderCost, Order_Date, CUSTOMER.Cust_ID, CUSTOMER.Cust_L_Name, CUSTOMER.Cust_F_Name, Cust_Phone_No, Cust_Email
FROM ORDERLINECALCVIEW INNER JOIN CUSTOMERORDER
ON ORDERLINECALCVIEW.ORDER_ID = CUSTOMERORDER.Order_ID
RIGHT JOIN CUSTOMER
ON CUSTOMERORDER.Cust_ID = CUSTOMER.Cust_ID
GROUP BY CUSTOMERORDER.Order_ID, Order_Date, CUSTOMER.Cust_ID, CUSTOMER.Cust_L_Name, CUSTOMER.Cust_F_Name, Cust_Phone_No, Cust_Email


SELECT * FROM OrderSummaryView;
DROP VIEW OrderSummaryView;

-- view #7 Query 6, shows noncompliance offenses by carrier and type
6. CREATE VIEW NONCOMPLIANCEVIEW AS 
SELECT NonCompliance.Carrier_ID, Carrier_Name, Non_Comp_Issue, COUNT(Non_Comp_ID)
FROM Carrier INNER JOIN NonCompliance
ON Carrier.Carrier_ID = NonCompliance.Carrier_ID
GROUP BY Carrier_Name, Non_Comp_Issue, NonCompliance.Carrier_ID
-- ORDER BY Carrier_Name

SELECT * FROM NONCOMPLIANCEVIEW;
DROP VIEW NONCOMPLIANCEVIEW;

-- view #8 Query 7, shows the performance of employees.
CREATE VIEW PerformanceReportView AS
SELECT S_EMPL_ID, EMPL_F_NAME, EMPL_L_NAME, SUM(ORDERLINE_TOTAL_COST) AS TOTALREVENUE
FROM CUSTOMERORDER
INNER JOIN EMPLOYEE 
ON CUSTOMERORDER.S_EMPL_ID = EMPLOYEE.EMPL_ID
INNER JOIN ORDERLINECALCVIEW
ON CUSTOMERORDER.ORDER_ID = ORDERLINECALCVIEW.ORDER_ID
WHERE ORDER_DATE >= GETDATE() -30
GROUP BY S_EMPL_ID, EMPL_F_NAME, EMPL_L_NAME
-- ORDER BY TOTALREVENUE DESC


SELECT * FROM PerformanceReportView;
DROP VIEW PerformanceReportView;

-- view #9 Query 8, shows orders that were completed more than 15 days late.
CREATE VIEW LateOrdersView AS
SELECT CUSTOMERORDER.ORDER_ID, CUSTOMERORDER.CUST_ID, CUST_F_NAME, CUST_L_NAME, 
S_EMPL_ID, EMPL_F_NAME, EMPL_L_NAME, ORDER_STATUS_ID, ORDER_DATE, ORDER_STATUS_DATE
FROM CUSTOMERORDER
INNER JOIN ORDERSTATUSLOG
ON CUSTOMERORDER.ORDER_ID = ORDERSTATUSLOG.ORDER_ID
INNER JOIN CUSTOMER
ON CUSTOMERORDER.CUST_ID = CUSTOMER.CUST_ID
INNER JOIN EMPLOYEE
ON CUSTOMERORDER.S_EMPL_ID = EMPLOYEE.EMPL_ID
WHERE ORDER_STATUS_ID = 3
AND ORDER_STATUS_DATE > (DATEADD(DAY, 15, ORDER_DATE));

SELECT * FROM LaterOrdersView;
DROP VIEW LateOrdersView;



Extra Queries:

Report # 5 in phase 1

/*Identify the order date, the completion date, and a calculated column called turnaround time 
that displays the turnaround time by taking the difference between these two dates. This enables 
key users to identify materials that have slower turnaround times and target those production processes 
in to help improve their turnaround time if necessary. The parameters of this report would be Material ID 
and Order ID. The output is sorted by Material ID.*/


CREATE VIEW MTOTurnaround AS
SELECT CUSTOMERORDER.ORDER_ID, MTO_MAT_ID, ORDER_DATE, MTO_COMPLETION_DATE, DATEDIFF(DD, ORDER_DATE, MTO_COMPLETION_DATE) AS TURNAROUND_TIME
FROM CUSTOMERORDER
INNER JOIN ORDERLINE
ON CUSTOMERORDER.ORDER_ID = ORDERLINE.ORDER_ID
INNER JOIN MAKETOORDER
ON MAKETOORDER.MTO_MAT_ID = ORDERLINE.PRODUCT_ID












/*5. A list of employees who have worked for IP for 5, 10, or 25 years. Only include current employees. 
Include relevant information so each employee can be recognized for his/her years of service. If the employee is 
a Sales Team Member, provide information about the number of orders the employee has submitted. 
If the employee is a Planning Team Member, provide information about the number of shipments they have managed.*/

SELECT EMPLOYEE.EMPL_ID, EMPL_F_NAME, EMPL_L_NAME, EMPL_STATUS_NAME, EMPL_HIRE_DATE, 
DATEDIFF(YEAR, EMPL_HIRE_DATE, GETDATE()) AS #YEARSWORKED, EMPL_TYPE, COUNT(ORDER_ID) AS #ORDERS_OR_SHIPMENTS
FROM EMPLOYEE
LEFT JOIN CUSTOMERORDER
ON EMPLOYEE.EMPL_ID = CUSTOMERORDER.S_EMPL_ID
INNER JOIN EMPLSTATUSLOG
ON EMPLOYEE.EMPL_ID = EMPLSTATUSLOG.EMPL_ID
INNER JOIN EMPLSTATUS 
ON EMPLSTATUS.EMPL_STATUS_ID = EMPLSTATUSLOG.EMPL_STATUS_ID
WHERE EMPL_TYPE = 'S' AND DATEDIFF(YEAR, EMPL_HIRE_DATE, GETDATE()) IN (5, 10, 25)
AND EMPL_STATUS_NAME = 'ACTIVE'
GROUP BY EMPLOYEE.EMPL_ID, EMPL_F_NAME, EMPL_L_NAME, EMPL_STATUS_NAME, EMPL_HIRE_DATE, EMPL_TYPE
UNION
SELECT EMPLOYEE.EMPL_ID, EMPL_F_NAME, EMPL_L_NAME, EMPL_STATUS_NAME, EMPL_HIRE_DATE, 
DATEDIFF(YEAR, EMPL_HIRE_DATE, GETDATE()) AS #YEARSWORKED, EMPL_TYPE, COUNT(SHIP_ID) AS #ORDERS_OR_SHIPMENTS
FROM EMPLOYEE
LEFT JOIN SHIPMENT
ON EMPLOYEE.EMPL_ID = SHIPMENT.T_EMPL_ID
INNER JOIN EMPLSTATUSLOG
ON EMPLOYEE.EMPL_ID = EMPLSTATUSLOG.EMPL_ID
INNER JOIN EMPLSTATUS 
ON EMPLSTATUS.EMPL_STATUS_ID = EMPLSTATUSLOG.EMPL_STATUS_ID
WHERE EMPL_TYPE = 'T' AND DATEDIFF(YEAR, EMPL_HIRE_DATE, GETDATE()) IN (5, 10, 25)
AND EMPL_STATUS_NAME = 'ACTIVE'
GROUP BY EMPLOYEE.EMPL_ID, EMPL_F_NAME, EMPL_L_NAME, EMPL_STATUS_NAME, EMPL_HIRE_DATE, EMPL_TYPE;





